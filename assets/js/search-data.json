{
  
    
        "post0": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . Front Matter is a markdown cell at the beginning of your notebook that allows you to inject metadata into your notebook. For example: . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks just like you can with markdown. . For example, here is a footnote 1. . . This is the footnote.&#8617; . |",
            "url": "https://pwolter.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Analyzing a decade of NHL Hockey (2010-2019)",
            "content": "Analyzing a decade of NHL Hockey (2010-2019) . In the last decade a lot has changed in hockey. The game has changed significantly. Not only players are stronger now but the rules have made the game different than it used to be a decade ago. . Questions to be answered . These are the questions I am going to answer on this notebook: . What are the league&#39;s best goalies? | What are the league&#39;s best players? | What are the best scorer players per team? | What are the players that have most penalty minutes per team | What is the most prolific country producing NHL players? | Acknowledgements . I cannot thank enough Jeremy Howard from fast.ai for his incredible tools and tutorials. I borrowed a lot form his libraries. . The Data set was obtained from Kaggle&#39;s user Martin Ellis. Thanks a ton Martin!! It is super hard to find such quality data for the NHL. . Loading required libraries . %load_ext autoreload %autoreload 2 %matplotlib inline . import squarify import matplotlib import numpy as np import pandas as pd import seaborn as sns import matplotlib.pyplot as plt . # Set the precision to 2 decimals pd.set_option(&quot;display.precision&quot;, 2) . Load data files in pandas . I add this PATH variable so I don&#39;t have to type it every time to load data into pandas. . PATH = &#39;../../datasets/nhl-game-data/&#39; . Loading the data I am interested . team_info = pd.read_csv(f&#39;{PATH}team_info.csv&#39;, low_memory=False) player_info = pd.read_csv(f&#39;{PATH}player_info.csv&#39;, low_memory=False, parse_dates=[&quot;birthDate&quot;]) game_skater_stats = pd.read_csv(f&#39;{PATH}game_skater_stats.csv&#39;, low_memory=False) game_goalie_stats = pd.read_csv(f&#39;{PATH}game_goalie_stats.csv&#39;, low_memory=False) game_team_stats = pd.read_csv(f&#39;{PATH}game_teams_stats.csv&#39;, low_memory=False) game = pd.read_csv(f&#39;{PATH}game.csv&#39;, low_memory=False, parse_dates=[&quot;date_time&quot;, &quot;date_time_GMT&quot;]) . This function is borrowed from fast.ai. It lists all the data so we can see it completely in one shot (eliminating the $ dots$ dots) in Jupyter&#39;s output. . def display_all(df): &#39;&#39;&#39; INPUT - data frame - pandas dataframe with the data to display OUTPUT - display the dataframe with 1,000 rows and columns setting &#39;&#39;&#39; with pd.option_context(&quot;display.max_rows&quot;, 1000, &quot;display.max_columns&quot;, 1000): display(df) . def display_bar_plot(df, sort_column, x_col, y_col, n=10): &#39;&#39;&#39; INPUT - df - dataframe to plot sort_column - column values we want to sort the data x_col - column for x axis y_col - column fo ry axis n - top n rows to plot OUTPUT - display the dataframe&#39;s bar plot &#39;&#39;&#39; x = df.sort_values(sort_column, ascending=False).head(n)[x_col] y = df.sort_values(sort_column, ascending=False).head(n)[y_col] plt.figure(figsize=(16,6)) sns.set_color_codes(&quot;dark&quot;) ax = sns.barplot(x=x, y=y, color=&#39;steelblue&#39;, alpha=0.6) ax.grid(False) ax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=&quot;right&quot;) . def display_hbar_plot(df, x_col, y_col, hue, color=&#39;steelblue&#39;, palette=None): &#39;&#39;&#39; INPUT - df - dataframe to plot x_col - column for x axis y_col - column fo ry axis hue - what column to use to change color color - the color we want the graph to use palette - the palette we want to use in case of multi variable histogram OUTPUT - display the dataframe&#39;s horizontal bar plot &#39;&#39;&#39; sns.set(style=&quot;whitegrid&quot;) sns.barplot(x=x_col, y=y_col, hue=hue, data=df, color=color, palette=palette, dodge=False, alpha=0.6); plt.xlabel(x_col) plt.ylabel(y_col) . Data understanding . display_all(team_info.tail().T) . 28 29 30 31 32 . team_id 22 | 54 | 12 | 53 | 11 | . franchiseId 25 | 38 | 26 | 28 | 35 | . shortName Edmonton | Vegas | Carolina | Arizona | Atlanta | . teamName Oilers | Golden Knights | Hurricanes | Coyotes | Thrashers | . abbreviation EDM | VGK | CAR | ARI | ATL | . link /api/v1/teams/22 | /api/v1/teams/54 | /api/v1/teams/12 | /api/v1/teams/53 | /api/v1/teams/11 | . I am going to remove all columns I really don&#39;t need for my analysis like franchiseId and link from the data frame. . team_info.drop(columns=[&#39;franchiseId&#39;, &#39;link&#39;], inplace=True) . display_all(player_info.tail().T) . 2404 2405 2406 2407 2408 . player_id 8478040 | 8480011 | 8480384 | 8480021 | 8477352 | . firstName Austin | Klim | Alexander | Jack | Ryan | . lastName Poganski | Kostin | True | Studnicka | Fitzgerald | . nationality USA | RUS | DNK | CAN | USA | . birthCity St. Cloud | Penza | Kobenhavn | Windsor | Boca Raton | . primaryPosition RW | C | C | C | C | . birthDate 1996-02-16 00:00:00 | 1999-05-05 00:00:00 | 1997-07-17 00:00:00 | 1999-02-18 00:00:00 | 1994-10-19 00:00:00 | . link /api/v1/people/8478040 | /api/v1/people/8480011 | /api/v1/people/8480384 | /api/v1/people/8480021 | /api/v1/people/8477352 | . Again I drop the columns I don&#39;t need . player_info.drop(columns=[&#39;birthCity&#39;, &#39;link&#39;], inplace=True) . display_all(game_skater_stats.tail().T) . 411573 411574 411575 411576 411577 . game_id 2018030417 | 2018030417 | 2018030417 | 2018030417 | 2018030417 | . player_id 8475807 | 8475149 | 8475745 | 8478443 | 8478046 | . team_id 6 | 6 | 6 | 6 | 6 | . timeOnIce 501 | 1062 | 913 | 1006 | 909 | . assists 0 | 0 | 0 | 0 | 0 | . goals 0 | 0 | 0 | 0 | 0 | . shots 1 | 2 | 2 | 1 | 2 | . hits 2 | 0 | 3 | 1 | 0 | . powerPlayGoals 0 | 0 | 0 | 0 | 0 | . powerPlayAssists 0 | 0 | 0 | 0 | 0 | . penaltyMinutes 0 | 0 | 0 | 0 | 0 | . faceOffWins 0 | 1 | 4 | 0 | 0 | . faceoffTaken 0 | 1 | 11 | 0 | 0 | . takeaways 0 | 1 | 1 | 0 | 1 | . giveaways 0 | 0 | 0 | 1 | 1 | . shortHandedGoals 0 | 0 | 0 | 0 | 0 | . shortHandedAssists 0 | 0 | 0 | 0 | 0 | . blocked 0 | 0 | 0 | 2 | 0 | . plusMinus -1 | -1 | 0 | -1 | 0 | . evenTimeOnIce 501 | 957 | 913 | 1006 | 909 | . shortHandedTimeOnIce 0 | 0 | 0 | 0 | 0 | . powerPlayTimeOnIce 0 | 105 | 0 | 0 | 0 | . display_all(game_goalie_stats.tail().T) . 24641 24642 24643 24644 24645 . game_id 2018030415 | 2018030416 | 2018030416 | 2018030417 | 2018030417 | . player_id 8471695 | 8471695 | 8476412 | 8476412 | 8471695 | . team_id 6 | 6 | 19 | 19 | 6 | . timeOnIce 3522 | 3600 | 3487 | 3600 | 3394 | . assists 0 | 0 | 0 | 0 | 0 | . goals 0 | 0 | 0 | 0 | 0 | . pim 0 | 0 | 0 | 0 | 0 | . shots 21 | 29 | 31 | 33 | 20 | . saves 19 | 28 | 27 | 32 | 16 | . powerPlaySaves 1 | 12 | 3 | 3 | 0 | . shortHandedSaves 1 | 1 | 1 | 0 | 0 | . evenSaves 17 | 15 | 23 | 29 | 16 | . shortHandedShotsAgainst 1 | 1 | 1 | 0 | 0 | . evenShotsAgainst 19 | 16 | 26 | 30 | 20 | . powerPlayShotsAgainst 1 | 12 | 4 | 3 | 0 | . decision L | W | L | W | L | . savePercentage 90 | 97 | 87 | 97 | 80 | . powerPlaySavePercentage 1e+02 | 1e+02 | 75 | 1e+02 | NaN | . evenStrengthSavePercentage 89 | 94 | 88 | 97 | 80 | . display_all(game_team_stats.tail().T) . 22863 22864 22865 22866 22867 . game_id 2018030415 | 2018030416 | 2018030416 | 2018030417 | 2018030417 | . team_id 6 | 6 | 19 | 19 | 6 | . HoA home | away | home | away | home | . won False | True | False | True | False | . settled_in REG | REG | REG | REG | REG | . head_coach Bruce Cassidy | Bruce Cassidy | Craig Berube | Craig Berube | Bruce Cassidy | . goals 1 | 5 | 1 | 4 | 1 | . shots 39 | 32 | 29 | 20 | 33 | . hits 43 | 27 | 29 | 36 | 28 | . pim 2 | 10 | 20 | 2 | 0 | . powerPlayOpportunities 3 | 4 | 4 | 0 | 1 | . powerPlayGoals 0 | 1 | 0 | 0 | 0 | . faceOffWinPercentage 41 | 41 | 59 | 49 | 51 | . giveaways 4 | 4 | 12 | 7 | 13 | . takeaways 11 | 10 | 11 | 8 | 6 | . display_all(game.tail().T) . 11429 11430 11431 11432 11433 . game_id 2018030413 | 2018030414 | 2018030415 | 2018030416 | 2018030417 | . season 20182019 | 20182019 | 20182019 | 20182019 | 20182019 | . type P | P | P | P | P | . date_time 2019-06-02 00:00:00 | 2019-06-04 00:00:00 | 2019-06-07 00:00:00 | 2019-06-10 00:00:00 | 2019-06-13 00:00:00 | . date_time_GMT 2019-06-02 00:00:00+00:00 | 2019-06-04 00:00:00+00:00 | 2019-06-07 00:00:00+00:00 | 2019-06-10 00:00:00+00:00 | 2019-06-13 00:00:00+00:00 | . away_team_id 6 | 6 | 19 | 6 | 19 | . home_team_id 19 | 19 | 6 | 19 | 6 | . away_goals 7 | 2 | 2 | 5 | 4 | . home_goals 2 | 4 | 1 | 1 | 1 | . outcome away win REG | home win REG | away win REG | away win REG | away win REG | . home_rink_side_start left | left | left | left | left | . venue Enterprise Center | Enterprise Center | TD Garden | Enterprise Center | TD Garden | . venue_link /api/v1/venues/5076 | /api/v1/venues/5076 | /api/v1/venues/5085 | /api/v1/venues/5076 | /api/v1/venues/5085 | . venue_time_zone_id America/Chicago | America/Chicago | America/New_York | America/Chicago | America/New_York | . venue_time_zone_offset -5 | -5 | -4 | -5 | -4 | . venue_time_zone_tz CDT | CDT | EDT | CDT | EDT | . game.drop(columns=[&#39;venue_link&#39;], inplace=True) . Describe the dataframes . I describe the dataframes to get a sense of the information contained inside. . display_all(team_info.describe(include=&#39;all&#39;).T) . count unique top freq mean std min 25% 50% 75% max . team_id 33 | NaN | NaN | NaN | 19 | 14 | 1 | 9 | 17 | 25 | 54 | . shortName 33 | 33 | San Jose | 1 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . teamName 33 | 32 | Coyotes | 2 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . abbreviation 33 | 33 | ARI | 1 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . display_all(player_info.describe(include=&#39;all&#39;).T) . count unique top freq first last mean std min 25% 50% 75% max . player_id 2.4e+03 | NaN | NaN | NaN | NaT | NaT | 8.5e+06 | 4.7e+03 | 8.4e+06 | 8.5e+06 | 8.5e+06 | 8.5e+06 | 8.5e+06 | . firstName 2409 | 703 | Ryan | 54 | NaT | NaT | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . lastName 2409 | 2045 | Smith | 12 | NaT | NaT | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . nationality 2400 | 25 | CAN | 1146 | NaT | NaT | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . primaryPosition 2409 | 5 | D | 744 | NaT | NaT | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . birthDate 2409 | 2033 | 1991-01-03 00:00:00 | 5 | 1960-10-24 | 2000-07-06 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . display_all(game_skater_stats.describe(include=&#39;all&#39;).T) . count mean std min 25% 50% 75% max . game_id 411578.0 | 2.01e+09 | 2.61e+06 | 2.01e+09 | 2.01e+09 | 2.01e+09 | 2.02e+09 | 2.02e+09 | . player_id 411578.0 | 8.47e+06 | 4.04e+03 | 8.45e+06 | 8.47e+06 | 8.47e+06 | 8.48e+06 | 8.48e+06 | . team_id 411578.0 | 1.74e+01 | 1.20e+01 | 1.00e+00 | 8.00e+00 | 1.60e+01 | 2.40e+01 | 5.40e+01 | . timeOnIce 411578.0 | 9.94e+02 | 2.98e+02 | 1.00e+00 | 7.98e+02 | 1.00e+03 | 1.19e+03 | 3.20e+03 | . assists 411578.0 | 2.59e-01 | 5.27e-01 | 0.00e+00 | 0.00e+00 | 0.00e+00 | 0.00e+00 | 5.00e+00 | . goals 411578.0 | 1.52e-01 | 4.04e-01 | 0.00e+00 | 0.00e+00 | 0.00e+00 | 0.00e+00 | 5.00e+00 | . shots 411578.0 | 1.69e+00 | 1.54e+00 | 0.00e+00 | 1.00e+00 | 1.00e+00 | 3.00e+00 | 1.50e+01 | . hits 411578.0 | 1.31e+00 | 1.46e+00 | 0.00e+00 | 0.00e+00 | 1.00e+00 | 2.00e+00 | 1.50e+01 | . powerPlayGoals 411578.0 | 3.29e-02 | 1.85e-01 | 0.00e+00 | 0.00e+00 | 0.00e+00 | 0.00e+00 | 3.00e+00 | . powerPlayAssists 411578.0 | 6.27e-02 | 2.59e-01 | 0.00e+00 | 0.00e+00 | 0.00e+00 | 0.00e+00 | 4.00e+00 | . penaltyMinutes 411578.0 | 5.51e-01 | 1.55e+00 | 0.00e+00 | 0.00e+00 | 0.00e+00 | 0.00e+00 | 4.20e+01 | . faceOffWins 411578.0 | 1.67e+00 | 3.30e+00 | 0.00e+00 | 0.00e+00 | 0.00e+00 | 1.00e+00 | 3.10e+01 | . faceoffTaken 411578.0 | 3.33e+00 | 6.13e+00 | 0.00e+00 | 0.00e+00 | 0.00e+00 | 3.00e+00 | 4.40e+01 | . takeaways 411578.0 | 3.84e-01 | 6.67e-01 | 0.00e+00 | 0.00e+00 | 0.00e+00 | 1.00e+00 | 8.00e+00 | . giveaways 411578.0 | 4.52e-01 | 7.47e-01 | 0.00e+00 | 0.00e+00 | 0.00e+00 | 1.00e+00 | 8.00e+00 | . shortHandedGoals 411578.0 | 4.31e-03 | 6.59e-02 | 0.00e+00 | 0.00e+00 | 0.00e+00 | 0.00e+00 | 2.00e+00 | . shortHandedAssists 411578.0 | 4.44e-03 | 6.68e-02 | 0.00e+00 | 0.00e+00 | 0.00e+00 | 0.00e+00 | 2.00e+00 | . blocked 411578.0 | 8.02e-01 | 1.10e+00 | 0.00e+00 | 0.00e+00 | 0.00e+00 | 1.00e+00 | 1.50e+01 | . plusMinus 411578.0 | -7.53e-03 | 1.10e+00 | -7.00e+00 | -1.00e+00 | 0.00e+00 | 1.00e+00 | 6.00e+00 | . evenTimeOnIce 411578.0 | 8.36e+02 | 2.42e+02 | 0.00e+00 | 6.79e+02 | 8.36e+02 | 9.93e+02 | 2.93e+03 | . shortHandedTimeOnIce 411578.0 | 6.98e+01 | 8.41e+01 | 0.00e+00 | 0.00e+00 | 4.00e+01 | 1.17e+02 | 7.24e+02 | . powerPlayTimeOnIce 411578.0 | 8.79e+01 | 1.03e+02 | 0.00e+00 | 0.00e+00 | 5.20e+01 | 1.50e+02 | 9.22e+02 | . display_all(game_goalie_stats.describe(include=&#39;all&#39;).T) . count unique top freq mean std min 25% 50% 75% max . game_id 2.5e+04 | NaN | NaN | NaN | 2e+09 | 2.6e+06 | 2e+09 | 2e+09 | 2e+09 | 2e+09 | 2e+09 | . player_id 2.5e+04 | NaN | NaN | NaN | 8.5e+06 | 4.2e+03 | 8.5e+06 | 8.5e+06 | 8.5e+06 | 8.5e+06 | 8.5e+06 | . team_id 2.5e+04 | NaN | NaN | NaN | 17 | 12 | 1 | 8 | 16 | 24 | 54 | . timeOnIce 2.5e+04 | NaN | NaN | NaN | 3.4e+03 | 7.4e+02 | 0 | 3.5e+03 | 3.6e+03 | 3.6e+03 | 7e+03 | . assists 2.5e+04 | NaN | NaN | NaN | 0.021 | 0.15 | 0 | 0 | 0 | 0 | 2 | . goals 2.5e+04 | NaN | NaN | NaN | 0.00012 | 0.011 | 0 | 0 | 0 | 0 | 1 | . pim 2.5e+04 | NaN | NaN | NaN | 0.057 | 0.47 | 0 | 0 | 0 | 0 | 29 | . shots 2.5e+04 | NaN | NaN | NaN | 28 | 8.8 | 0 | 23 | 29 | 34 | 64 | . saves 2.5e+04 | NaN | NaN | NaN | 26 | 8.7 | 0 | 21 | 26 | 31 | 60 | . powerPlaySaves 2.5e+04 | NaN | NaN | NaN | 3.7 | 3 | 0 | 1 | 3 | 5 | 25 | . shortHandedSaves 2.5e+04 | NaN | NaN | NaN | 0.66 | 0.95 | -1 | 0 | 0 | 1 | 8 | . evenSaves 2.5e+04 | NaN | NaN | NaN | 21 | 7.6 | 0 | 17 | 22 | 26 | 57 | . shortHandedShotsAgainst 2.5e+04 | NaN | NaN | NaN | 0.73 | 1 | 0 | 0 | 0 | 1 | 8 | . evenShotsAgainst 2.5e+04 | NaN | NaN | NaN | 23 | 7.8 | 0 | 19 | 23 | 28 | 61 | . powerPlayShotsAgainst 2.5e+04 | NaN | NaN | NaN | 4.3 | 3.2 | 0 | 2 | 4 | 6 | 25 | . decision 22868 | 2 | L | 11434 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . savePercentage 2.5e+04 | NaN | NaN | NaN | 90 | 7.7 | 0 | 88 | 92 | 95 | 1e+02 | . powerPlaySavePercentage 2.2e+04 | NaN | NaN | NaN | 84 | 23 | 0 | 75 | 1e+02 | 1e+02 | 1e+02 | . evenStrengthSavePercentage 2.5e+04 | NaN | NaN | NaN | 91 | 8.1 | 0 | 88 | 93 | 96 | 1e+02 | . display_all(game_team_stats.describe(include=&#39;all&#39;).T) . count unique top freq mean std min 25% 50% 75% max . game_id 2.3e+04 | NaN | NaN | NaN | 2e+09 | 2.6e+06 | 2e+09 | 2e+09 | 2e+09 | 2e+09 | 2e+09 | . team_id 2.3e+04 | NaN | NaN | NaN | 17 | 12 | 1 | 8 | 16 | 24 | 54 | . HoA 22868 | 2 | away | 11434 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . won 22868 | 2 | True | 11434 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . settled_in 22868 | 3 | REG | 17476 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . head_coach 22868 | 83 | Barry Trotz | 797 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . goals 2.3e+04 | NaN | NaN | NaN | 2.7 | 1.6 | 0 | 2 | 3 | 4 | 10 | . shots 2.3e+04 | NaN | NaN | NaN | 30 | 6.8 | 10 | 26 | 30 | 35 | 64 | . hits 2.3e+04 | NaN | NaN | NaN | 24 | 8.6 | 2 | 17 | 23 | 29 | 80 | . pim 2.3e+04 | NaN | NaN | NaN | 10 | 8 | 0 | 6 | 8 | 12 | 1.8e+02 | . powerPlayOpportunities 2.3e+04 | NaN | NaN | NaN | 3.2 | 1.6 | 0 | 2 | 3 | 4 | 12 | . powerPlayGoals 2.3e+04 | NaN | NaN | NaN | 0.59 | 0.76 | 0 | 0 | 0 | 1 | 6 | . faceOffWinPercentage 2.3e+04 | NaN | NaN | NaN | 50 | 7.2 | 21 | 45 | 50 | 55 | 79 | . giveaways 2.3e+04 | NaN | NaN | NaN | 8.6 | 4.9 | 0 | 5 | 8 | 12 | 36 | . takeaways 2.3e+04 | NaN | NaN | NaN | 6.9 | 3.8 | 0 | 4 | 6 | 9 | 31 | . display_all(game.describe(include=&#39;all&#39;).T) . count unique top freq first last mean std min 25% 50% 75% max . game_id 1.1e+04 | NaN | NaN | NaN | NaN | NaN | 2e+09 | 2.6e+06 | 2e+09 | 2e+09 | 2e+09 | 2e+09 | 2e+09 | . season 1.1e+04 | NaN | NaN | NaN | NaN | NaN | 2e+07 | 2.6e+04 | 2e+07 | 2e+07 | 2e+07 | 2e+07 | 2e+07 | . type 11434 | 2 | R | 10642 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . date_time 11434 | 1923 | 2012-03-11 00:00:00 | 16 | 2010-10-07 00:00:00 | 2019-06-13 00:00:00 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . date_time_GMT 11434 | 7156 | 2014-10-11 23:00:00+00:00 | 9 | 2010-10-07 16:00:00+00:00 | 2019-06-13 00:00:00+00:00 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . away_team_id 1.1e+04 | NaN | NaN | NaN | NaN | NaN | 17 | 12 | 1 | 8 | 16 | 24 | 54 | . home_team_id 1.1e+04 | NaN | NaN | NaN | NaN | NaN | 17 | 12 | 1 | 8 | 16 | 24 | 54 | . away_goals 1.1e+04 | NaN | NaN | NaN | NaN | NaN | 2.7 | 1.6 | 0 | 1 | 3 | 4 | 10 | . home_goals 1.1e+04 | NaN | NaN | NaN | NaN | NaN | 2.9 | 1.7 | 0 | 2 | 3 | 4 | 10 | . outcome 11434 | 6 | home win REG | 4857 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . home_rink_side_start 11140 | 2 | right | 5958 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . venue 11434 | 82 | TD Garden | 408 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . venue_time_zone_id 11434 | 11 | America/New_York | 4974 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . venue_time_zone_offset 1.1e+04 | NaN | NaN | NaN | NaN | NaN | -5 | 1.2 | -8 | -6 | -5 | -4 | -4 | . venue_time_zone_tz 11434 | 8 | EDT | 5549 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . Let&#39;s check the type of each column . I run info() to spot missing data (null values), check what pandas think my data types are and correct them if necesary. . team_info.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 33 entries, 0 to 32 Data columns (total 4 columns): # Column Non-Null Count Dtype -- -- 0 team_id 33 non-null int64 1 shortName 33 non-null object 2 teamName 33 non-null object 3 abbreviation 33 non-null object dtypes: int64(1), object(3) memory usage: 1.2+ KB . player_info.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 2409 entries, 0 to 2408 Data columns (total 6 columns): # Column Non-Null Count Dtype -- -- 0 player_id 2409 non-null int64 1 firstName 2409 non-null object 2 lastName 2409 non-null object 3 nationality 2400 non-null object 4 primaryPosition 2409 non-null object 5 birthDate 2409 non-null datetime64[ns] dtypes: datetime64[ns](1), int64(1), object(4) memory usage: 113.0+ KB . game_skater_stats.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 411578 entries, 0 to 411577 Data columns (total 22 columns): # Column Non-Null Count Dtype -- -- 0 game_id 411578 non-null int64 1 player_id 411578 non-null int64 2 team_id 411578 non-null int64 3 timeOnIce 411578 non-null int64 4 assists 411578 non-null int64 5 goals 411578 non-null int64 6 shots 411578 non-null int64 7 hits 411578 non-null int64 8 powerPlayGoals 411578 non-null int64 9 powerPlayAssists 411578 non-null int64 10 penaltyMinutes 411578 non-null int64 11 faceOffWins 411578 non-null int64 12 faceoffTaken 411578 non-null int64 13 takeaways 411578 non-null int64 14 giveaways 411578 non-null int64 15 shortHandedGoals 411578 non-null int64 16 shortHandedAssists 411578 non-null int64 17 blocked 411578 non-null int64 18 plusMinus 411578 non-null int64 19 evenTimeOnIce 411578 non-null int64 20 shortHandedTimeOnIce 411578 non-null int64 21 powerPlayTimeOnIce 411578 non-null int64 dtypes: int64(22) memory usage: 69.1 MB . game_goalie_stats.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 24646 entries, 0 to 24645 Data columns (total 19 columns): # Column Non-Null Count Dtype -- -- 0 game_id 24646 non-null int64 1 player_id 24646 non-null int64 2 team_id 24646 non-null int64 3 timeOnIce 24646 non-null int64 4 assists 24646 non-null int64 5 goals 24646 non-null int64 6 pim 24646 non-null int64 7 shots 24646 non-null int64 8 saves 24646 non-null int64 9 powerPlaySaves 24646 non-null int64 10 shortHandedSaves 24646 non-null int64 11 evenSaves 24646 non-null int64 12 shortHandedShotsAgainst 24646 non-null int64 13 evenShotsAgainst 24646 non-null int64 14 powerPlayShotsAgainst 24646 non-null int64 15 decision 22868 non-null object 16 savePercentage 24607 non-null float64 17 powerPlaySavePercentage 22237 non-null float64 18 evenStrengthSavePercentage 24590 non-null float64 dtypes: float64(3), int64(15), object(1) memory usage: 3.6+ MB . game_team_stats.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 22868 entries, 0 to 22867 Data columns (total 15 columns): # Column Non-Null Count Dtype -- -- 0 game_id 22868 non-null int64 1 team_id 22868 non-null int64 2 HoA 22868 non-null object 3 won 22868 non-null bool 4 settled_in 22868 non-null object 5 head_coach 22868 non-null object 6 goals 22868 non-null int64 7 shots 22868 non-null int64 8 hits 22868 non-null int64 9 pim 22868 non-null int64 10 powerPlayOpportunities 22868 non-null int64 11 powerPlayGoals 22868 non-null int64 12 faceOffWinPercentage 22868 non-null float64 13 giveaways 22868 non-null int64 14 takeaways 22868 non-null int64 dtypes: bool(1), float64(1), int64(10), object(3) memory usage: 2.5+ MB . game.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 11434 entries, 0 to 11433 Data columns (total 15 columns): # Column Non-Null Count Dtype -- -- 0 game_id 11434 non-null int64 1 season 11434 non-null int64 2 type 11434 non-null object 3 date_time 11434 non-null datetime64[ns] 4 date_time_GMT 11434 non-null datetime64[ns, UTC] 5 away_team_id 11434 non-null int64 6 home_team_id 11434 non-null int64 7 away_goals 11434 non-null int64 8 home_goals 11434 non-null int64 9 outcome 11434 non-null object 10 home_rink_side_start 11140 non-null object 11 venue 11434 non-null object 12 venue_time_zone_id 11434 non-null object 13 venue_time_zone_offset 11434 non-null int64 14 venue_time_zone_tz 11434 non-null object dtypes: datetime64[ns, UTC](1), datetime64[ns](1), int64(7), object(6) memory usage: 1.3+ MB . Data preparation . Now let&#39;s address all the issues found in previous sections like null values, drop columns I do not need for now etcetera. . Let&#39;s address some null values . Players file has some missing data I need to investigate. . player_info[player_info[&#39;nationality&#39;].isnull()] . player_id firstName lastName nationality primaryPosition birthDate . 1445 8480373 | Josef | Korenar | NaN | G | 1998-01-31 | . 1548 8480356 | Kyle | Keyser | NaN | G | 1999-03-08 | . 2009 8479138 | Scott | Foster | NaN | G | 1982-01-17 | . 2026 8480718 | Ben | Wexler | NaN | G | 1994-12-23 | . 2079 8479439 | Jacob | MacDonald | NaN | D | 1993-02-26 | . 2107 8479016 | Landon | Bow | NaN | G | 1995-08-24 | . 2383 8481481 | Blake | Lizotte | NaN | C | 1997-12-13 | . 2384 8480363 | Kaden | Fulcher | NaN | G | 1998-09-23 | . 2386 8480779 | Niclas | Westerholm | NaN | G | 1997-08-13 | . A quick google search and I found all these players are mainly prospects so no surprise there is missing infomation about them. . Scott Foster was Blackhawks contracted emergency goalie. He never suited up for a game during his tenure with the team. Until that luckly night during the 2017-2018 season when all Blackhawks&#39; goalies where injured and he was called out to dress up. He played the &quot;longest 14 minutes of Hockey&quot; of his live as he described it himself in one of the countless interviews he did afterwards. . I manually fixed these are this are not too many. . # Josef Korenar player_info.at[1445, &#39;nationality&#39;] = &#39;CZE&#39; # Kyle Keyser player_info.at[1548, &#39;nationality&#39;] = &#39;USA&#39; # Scott Foster player_info.at[2009, &#39;nationality&#39;] = &#39;CAN&#39; # Ben Wexler player_info.at[2026, &#39;nationality&#39;] = &#39;USA&#39; # Jacob MacDonald player_info.at[2079, &#39;nationality&#39;] = &#39;USA&#39; # Landon Bow player_info.at[2107, &#39;nationality&#39;] = &#39;CAN&#39; # Blake Lizotte player_info.at[2383, &#39;nationality&#39;] = &#39;USA&#39; # Kaden Fulcher player_info.at[2384, &#39;nationality&#39;] = &#39;CAN&#39; # Niclas Westerholm player_info.at[2386, &#39;nationality&#39;] = &#39;FIN&#39; . Merge data with player&#39;s, team&#39;s and game&#39;s information . Now I have to do some table joints (merge in pandas lingo) so I can have the stats and the player&#39;s name in one dataframe. Same with the goalies and team names too. . skater = game_skater_stats.merge(player_info, on=&#39;player_id&#39;, how=&#39;left&#39;).merge(team_info, on=&#39;team_id&#39;, how=&#39;left&#39;) . goalie = game_goalie_stats.merge(player_info, on=&#39;player_id&#39;, how=&#39;left&#39;).merge(team_info, on=&#39;team_id&#39;, how=&#39;left&#39;) . Drop unnecesary columns and concatenate the player&#39;s first and last names . I concatenate the player&#39;s firs and last name into one column and drop them as I don&#39;t need them anymore moving forward. . skater[&#39;fullName&#39;] = skater[&#39;firstName&#39;].str.cat(skater[&#39;lastName&#39;], sep=&#39; &#39;) . goalie[&#39;fullName&#39;] = goalie[&#39;firstName&#39;].str.cat(goalie[&#39;lastName&#39;], sep=&#39; &#39;) . skater.drop([&#39;firstName&#39;, &#39;lastName&#39;, &#39;player_id&#39;, &#39;team_id&#39;], axis=1, inplace=True) . goalie.drop([&#39;firstName&#39;, &#39;lastName&#39;, &#39;player_id&#39;, &#39;team_id&#39;], axis=1, inplace=True) . games = skater.merge(game, on=&#39;game_id&#39;, how=&#39;left&#39;) . games.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Int64Index: 411578 entries, 0 to 411577 Data columns (total 41 columns): # Column Non-Null Count Dtype -- -- 0 game_id 411578 non-null int64 1 timeOnIce 411578 non-null int64 2 assists 411578 non-null int64 3 goals 411578 non-null int64 4 shots 411578 non-null int64 5 hits 411578 non-null int64 6 powerPlayGoals 411578 non-null int64 7 powerPlayAssists 411578 non-null int64 8 penaltyMinutes 411578 non-null int64 9 faceOffWins 411578 non-null int64 10 faceoffTaken 411578 non-null int64 11 takeaways 411578 non-null int64 12 giveaways 411578 non-null int64 13 shortHandedGoals 411578 non-null int64 14 shortHandedAssists 411578 non-null int64 15 blocked 411578 non-null int64 16 plusMinus 411578 non-null int64 17 evenTimeOnIce 411578 non-null int64 18 shortHandedTimeOnIce 411578 non-null int64 19 powerPlayTimeOnIce 411578 non-null int64 20 nationality 411578 non-null object 21 primaryPosition 411578 non-null object 22 birthDate 411578 non-null datetime64[ns] 23 shortName 411578 non-null object 24 teamName 411578 non-null object 25 abbreviation 411578 non-null object 26 fullName 411578 non-null object 27 season 411578 non-null int64 28 type 411578 non-null object 29 date_time 411578 non-null datetime64[ns] 30 date_time_GMT 411578 non-null datetime64[ns, UTC] 31 away_team_id 411578 non-null int64 32 home_team_id 411578 non-null int64 33 away_goals 411578 non-null int64 34 home_goals 411578 non-null int64 35 outcome 411578 non-null object 36 home_rink_side_start 400997 non-null object 37 venue 411578 non-null object 38 venue_time_zone_id 411578 non-null object 39 venue_time_zone_offset 411578 non-null int64 40 venue_time_zone_tz 411578 non-null object dtypes: datetime64[ns, UTC](1), datetime64[ns](2), int64(26), object(12) memory usage: 131.9+ MB . skater.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Int64Index: 411578 entries, 0 to 411577 Data columns (total 27 columns): # Column Non-Null Count Dtype -- -- 0 game_id 411578 non-null int64 1 timeOnIce 411578 non-null int64 2 assists 411578 non-null int64 3 goals 411578 non-null int64 4 shots 411578 non-null int64 5 hits 411578 non-null int64 6 powerPlayGoals 411578 non-null int64 7 powerPlayAssists 411578 non-null int64 8 penaltyMinutes 411578 non-null int64 9 faceOffWins 411578 non-null int64 10 faceoffTaken 411578 non-null int64 11 takeaways 411578 non-null int64 12 giveaways 411578 non-null int64 13 shortHandedGoals 411578 non-null int64 14 shortHandedAssists 411578 non-null int64 15 blocked 411578 non-null int64 16 plusMinus 411578 non-null int64 17 evenTimeOnIce 411578 non-null int64 18 shortHandedTimeOnIce 411578 non-null int64 19 powerPlayTimeOnIce 411578 non-null int64 20 nationality 411578 non-null object 21 primaryPosition 411578 non-null object 22 birthDate 411578 non-null datetime64[ns] 23 shortName 411578 non-null object 24 teamName 411578 non-null object 25 abbreviation 411578 non-null object 26 fullName 411578 non-null object dtypes: datetime64[ns](1), int64(20), object(6) memory usage: 87.9+ MB . goalie.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Int64Index: 24646 entries, 0 to 24645 Data columns (total 24 columns): # Column Non-Null Count Dtype -- -- 0 game_id 24646 non-null int64 1 timeOnIce 24646 non-null int64 2 assists 24646 non-null int64 3 goals 24646 non-null int64 4 pim 24646 non-null int64 5 shots 24646 non-null int64 6 saves 24646 non-null int64 7 powerPlaySaves 24646 non-null int64 8 shortHandedSaves 24646 non-null int64 9 evenSaves 24646 non-null int64 10 shortHandedShotsAgainst 24646 non-null int64 11 evenShotsAgainst 24646 non-null int64 12 powerPlayShotsAgainst 24646 non-null int64 13 decision 22868 non-null object 14 savePercentage 24607 non-null float64 15 powerPlaySavePercentage 22237 non-null float64 16 evenStrengthSavePercentage 24590 non-null float64 17 nationality 24646 non-null object 18 primaryPosition 24646 non-null object 19 birthDate 24646 non-null datetime64[ns] 20 shortName 24646 non-null object 21 teamName 24646 non-null object 22 abbreviation 24646 non-null object 23 fullName 24646 non-null object dtypes: datetime64[ns](1), float64(3), int64(13), object(7) memory usage: 4.7+ MB . print(&quot;Min season: {} nMax season: {}&quot;.format(str(game[&#39;season&#39;].min()), str(game[&#39;season&#39;].max()))) . Min season: 20102011 Max season: 20182019 . Best NHL Hockey players of the decade (2010-2019) . What are the league&#39;s best scorer players? . As we saw before, there are some prospect players that have made it to some matchs. Later on (when I analized goalies) I saw none of the best goalies from the league in the top 10! It ended up being these prospects (like Scott Foster who played 14 minutes and received zero goals, a 100% save percentage!) that have very few minutes but high save percentages. . To take care of this I had some alternatives: . Eliminate all goalies with 100% save percentage . This alternative is not fear to seasoned goalies, and players in general. Veteran goalie players enter the rink to replace the starting goalie when have already received 3-4 goals. So they deserve the good save percenatge. . Determine a minimum number of seasons to be considered . Also has some issues as this arises the question of: what does make the minumum number of seasons correct? In despite of this concern I have selected this option. I have chose a minimum of 5 seasons and an average of 81 games per season (41 home ice plus 41 away games). . # Minimum seasons played min_seasons_played = 5 games_per_season = 81 # Minummum number of games to be considered for the decade best player analysis min_games = min_seasons_played * games_per_season . # Filter out columns I don&#39;t need right now top_skaters = skater[[&#39;game_id&#39;,&#39;teamName&#39;,&#39;fullName&#39;,&#39;primaryPosition&#39;, &#39;nationality&#39;,&#39;timeOnIce&#39;,&#39;penaltyMinutes&#39;, &#39;goals&#39;]] .groupby([&#39;teamName&#39;,&#39;fullName&#39;, &#39;primaryPosition&#39;, &#39;nationality&#39;], as_index=False) .agg({&#39;game_id&#39;:&#39;count&#39;, &#39;goals&#39;:&#39;sum&#39;, &#39;timeOnIce&#39;:&#39;mean&#39;, &#39;penaltyMinutes&#39;:&#39;sum&#39;}) . top_skaters.head() . teamName fullName primaryPosition nationality game_id goals timeOnIce penaltyMinutes . 0 Avalanche | A.J. Greer | LW | CAN | 37 | 1 | 467.00 | 47 | . 1 Avalanche | Aaron Palushaj | RW | USA | 25 | 2 | 678.92 | 8 | . 2 Avalanche | Adam Foote | D | CAN | 47 | 0 | 1075.51 | 33 | . 3 Avalanche | Alex Tanguay | LW | CAN | 148 | 30 | 1038.57 | 68 | . 4 Avalanche | Alexander Kerfoot | C | CAN | 175 | 36 | 852.38 | 74 | . Renaming columns and doing some calculations. . top_skaters.columns = [&#39;Team Name&#39;,&#39;Player Name&#39;, &#39;Position&#39;, &#39;Nationality&#39;, &#39;Total Games&#39;, &#39;Total Goals&#39;,&#39;Avg Time On Ice&#39;, &#39;Total Penalty Minutes&#39;] . # Let&#39;s convert the time on ice from seconds to minutes top_skaters[&#39;Avg Time On Ice&#39;] = top_skaters[&#39;Avg Time On Ice&#39;] / 60 . # Let&#39;s compute the Goals per game (Goals Per Game) to normalize the data top_skaters[&#39;Goals Per Game&#39;] = top_skaters[&#39;Total Goals&#39;] / top_skaters[&#39;Total Games&#39;] # Let&#39;s see also how goals relate to time on ice (toi) top_skaters[&#39;Goals Per TOI&#39;] = top_skaters[&#39;Total Goals&#39;] / (top_skaters[&#39;Avg Time On Ice&#39;]) # Total penalty minutes per game top_skaters[&#39;Penalty Minutes Per Game&#39;] = top_skaters[&#39;Total Penalty Minutes&#39;] / (top_skaters[&#39;Total Games&#39;]) # Now we look at the top 10 players appliying the minimum games played in the league top_skaters[top_skaters[&#39;Total Games&#39;] &gt; min_games].sort_values(&#39;Goals Per Game&#39;, ascending=False).head(10) . Team Name Player Name Position Nationality Total Games Total Goals Avg Time On Ice Total Penalty Minutes Goals Per Game Goals Per TOI Penalty Minutes Per Game . 905 Capitals | Alex Ovechkin | LW | RUS | 788 | 434 | 20.32 | 449 | 0.55 | 21.36 | 0.57 | . 2224 Lightning | Steven Stamkos | C | CAN | 655 | 342 | 19.78 | 438 | 0.52 | 17.29 | 0.67 | . 2779 Penguins | Sidney Crosby | C | CAN | 674 | 299 | 20.71 | 345 | 0.44 | 14.44 | 0.51 | . 2713 Penguins | Evgeni Malkin | C | RUS | 643 | 282 | 19.41 | 697 | 0.44 | 14.53 | 1.08 | . 3620 Stars | Tyler Seguin | C | CAN | 489 | 211 | 19.78 | 139 | 0.43 | 10.67 | 0.28 | . 488 Blues | Vladimir Tarasenko | RW | RUS | 567 | 244 | 17.74 | 151 | 0.43 | 13.76 | 0.27 | . 1882 Islanders | John Tavares | C | CAN | 611 | 259 | 20.34 | 297 | 0.42 | 12.73 | 0.49 | . 2207 Lightning | Nikita Kucherov | RW | RUS | 512 | 217 | 17.87 | 274 | 0.42 | 12.14 | 0.54 | . 221 Blackhawks | Patrick Kane | RW | USA | 748 | 311 | 20.56 | 268 | 0.42 | 15.12 | 0.36 | . 705 Canadiens | Max Pacioretty | LW | USA | 578 | 230 | 18.49 | 327 | 0.40 | 12.44 | 0.57 | . top_skaters = top_skaters[top_skaters[&#39;Total Games&#39;] &gt; min_games] . display_bar_plot(top_skaters, &#39;Total Goals&#39;, &#39;Player Name&#39;, &#39;Total Goals&#39;, 10) plt.xlabel(&#39;Player Name&#39;) plt.ylabel(&#39;Total goals&#39;) plt.suptitle(&#39;Total goals by player (top 10)&#39;, fontsize=14) plt.title(&#39;2010 - 2019&#39;, fontsize=12) plt.show() . top_skaters.sort_values(&#39;Total Goals&#39;, ascending=False) .head(10)[[&#39;Team Name&#39;,&#39;Player Name&#39;, &#39;Position&#39;, &#39;Total Games&#39;,&#39;Total Goals&#39;]] . Team Name Player Name Position Total Games Total Goals . 905 Capitals | Alex Ovechkin | LW | 788 | 434 | . 2224 Lightning | Steven Stamkos | C | 655 | 342 | . 221 Blackhawks | Patrick Kane | RW | 748 | 311 | . 3456 Sharks | Joe Pavelski | C | 782 | 305 | . 2779 Penguins | Sidney Crosby | C | 674 | 299 | . 504 Bruins | Brad Marchand | LW | 769 | 292 | . 2713 Penguins | Evgeni Malkin | C | 643 | 282 | . 3467 Sharks | Logan Couture | C | 739 | 279 | . 1323 Ducks | Corey Perry | RW | 690 | 274 | . 3553 Stars | Jamie Benn | LW | 695 | 270 | . display_bar_plot(top_skaters, &#39;Goals Per Game&#39;, &#39;Player Name&#39;, &#39;Goals Per Game&#39;, 10) plt.xlabel(&#39;Player Name&#39;) plt.ylabel(&#39;Goals per game (Goals Per Game)&#39;) plt.suptitle(&#39;Goals per game (Goals Per Game) by player (top 10)&#39;, fontsize=14) plt.title(&#39;2010 - 2019&#39;, fontsize=12) plt.show() . Not surprisingly the ya re almost all Capitans of their respective teams! . top_skaters.sort_values(&#39;Goals Per Game&#39;, ascending=False) .head(10)[[&#39;Team Name&#39;,&#39;Player Name&#39;, &#39;Position&#39;, &#39;Total Games&#39;,&#39;Goals Per Game&#39;]] . Team Name Player Name Position Total Games Goals Per Game . 905 Capitals | Alex Ovechkin | LW | 788 | 0.55 | . 2224 Lightning | Steven Stamkos | C | 655 | 0.52 | . 2779 Penguins | Sidney Crosby | C | 674 | 0.44 | . 2713 Penguins | Evgeni Malkin | C | 643 | 0.44 | . 3620 Stars | Tyler Seguin | C | 489 | 0.43 | . 488 Blues | Vladimir Tarasenko | RW | 567 | 0.43 | . 1882 Islanders | John Tavares | C | 611 | 0.42 | . 2207 Lightning | Nikita Kucherov | RW | 512 | 0.42 | . 221 Blackhawks | Patrick Kane | RW | 748 | 0.42 | . 705 Canadiens | Max Pacioretty | LW | 578 | 0.40 | . Now let&#39;s look at the goals per player but normalized by minutes played (Goals Per TOI). . display_bar_plot(top_skaters, &#39;Goals Per TOI&#39;, &#39;Player Name&#39;, &#39;Goals Per TOI&#39;) plt.xlabel(&#39;Player Name&#39;) plt.ylabel(&#39;Goals per minutes played (toi)&#39;) plt.suptitle(&#39;Goals per minutes on the ice by player (top 10)&#39;, fontsize=14) plt.title(&#39;2010 - 2019&#39;, fontsize=12) plt.show() . We see some movement of players on the bottom of the list but Alex Ovechkin stills remain on the first place. . top_skaters.sort_values(&#39;Goals Per TOI&#39;, ascending=False) .head(10)[[&#39;Team Name&#39;,&#39;Player Name&#39;, &#39;Position&#39;, &#39;Total Games&#39;,&#39;Goals Per TOI&#39;]] . Team Name Player Name Position Total Games Goals Per TOI . 905 Capitals | Alex Ovechkin | LW | 788 | 21.36 | . 2224 Lightning | Steven Stamkos | C | 655 | 17.29 | . 504 Bruins | Brad Marchand | LW | 769 | 16.36 | . 3456 Sharks | Joe Pavelski | C | 782 | 15.42 | . 221 Blackhawks | Patrick Kane | RW | 748 | 15.12 | . 3467 Sharks | Logan Couture | C | 739 | 15.07 | . 2713 Penguins | Evgeni Malkin | C | 643 | 14.53 | . 2779 Penguins | Sidney Crosby | C | 674 | 14.44 | . 1323 Ducks | Corey Perry | RW | 690 | 14.36 | . 3553 Stars | Jamie Benn | LW | 695 | 14.03 | . display_bar_plot(top_skaters, &#39;Avg Time On Ice&#39;, &#39;Player Name&#39;, &#39;Avg Time On Ice&#39;) plt.xlabel(&#39;Player Name&#39;) plt.ylabel(&#39;Avg time on ice&#39;) plt.suptitle(&#39;Average time on ice per player (top 10)&#39;, fontsize=14) plt.title(&#39;2010 - 2019&#39;, fontsize=12) plt.show() . top_skaters.sort_values(&#39;Avg Time On Ice&#39;, ascending=False) .head(10)[[&#39;Team Name&#39;,&#39;Player Name&#39;, &#39;Position&#39;, &#39;Total Games&#39;,&#39;Avg Time On Ice&#39;]] . Team Name Player Name Position Total Games Avg Time On Ice . 3770 Wild | Ryan Suter | D | 570 | 27.93 | . 2067 Kings | Drew Doughty | D | 767 | 26.85 | . 3337 Senators | Erik Karlsson | D | 609 | 26.64 | . 2908 Predators | Shea Weber | D | 481 | 26.14 | . 171 Blackhawks | Duncan Keith | D | 760 | 25.55 | . 2738 Penguins | Kris Letang | D | 610 | 25.52 | . 390 Blues | Alex Pietrangelo | D | 754 | 25.14 | . 2896 Predators | Roman Josi | D | 634 | 24.80 | . 725 Canadiens | P.K. Subban | D | 473 | 24.79 | . 1974 Jets | Dustin Byfuglien | D | 555 | 24.58 | . display_bar_plot(top_skaters[top_skaters[&#39;Position&#39;] != &#39;D&#39;], &#39;Avg Time On Ice&#39;, &#39;Player Name&#39;, &#39;Avg Time On Ice&#39;) plt.xlabel(&#39;Player Name&#39;) plt.ylabel(&#39;Avg time on ice&#39;) plt.suptitle(&#39;Average time on ice per player (top 10)&#39;, fontsize=14) plt.title(&#39;Excluding Defense n2010 - 2019&#39;, fontsize=12) plt.show() . top_skaters[top_skaters[&#39;Position&#39;] != &#39;D&#39;].sort_values(&#39;Avg Time On Ice&#39;, ascending=False) .head(10)[[&#39;Team Name&#39;,&#39;Player Name&#39;, &#39;Position&#39;, &#39;Total Games&#39;,&#39;Avg Time On Ice&#39;]] . Team Name Player Name Position Total Games Avg Time On Ice . 2047 Kings | Anze Kopitar | C | 758 | 21.18 | . 1416 Ducks | Ryan Getzlaf | C | 690 | 20.92 | . 2779 Penguins | Sidney Crosby | C | 674 | 20.71 | . 221 Blackhawks | Patrick Kane | RW | 748 | 20.56 | . 1755 Hurricanes | Eric Staal | C | 430 | 20.51 | . 1590 Flyers | Claude Giroux | C | 734 | 20.51 | . 1882 Islanders | John Tavares | C | 611 | 20.34 | . 905 Capitals | Alex Ovechkin | LW | 788 | 20.32 | . 194 Blackhawks | Jonathan Toews | C | 740 | 20.31 | . 2513 Panthers | Aleksander Barkov | C | 419 | 19.96 | . display_bar_plot(top_skaters, &#39;Penalty Minutes Per Game&#39;, &#39;Player Name&#39;, &#39;Penalty Minutes Per Game&#39;) plt.xlabel(&#39;Player Name&#39;) plt.ylabel(&#39;Penalty minutes per game&#39;) plt.suptitle(&#39;Penalty minutes per player (top 10)&#39;, fontsize=14) plt.title(&#39;2010 - 2019&#39;, fontsize=12) plt.show() . top_skaters.sort_values(&#39;Penalty Minutes Per Game&#39;, ascending=False) .head(10)[[&#39;Team Name&#39;,&#39;Player Name&#39;, &#39;Position&#39;, &#39;Total Games&#39;,&#39;Penalty Minutes Per Game&#39;]] . Team Name Player Name Position Total Games Penalty Minutes Per Game . 3305 Senators | Chris Neil | RW | 468 | 2.40 | . 27 Avalanche | Cody McLeod | LW | 464 | 2.07 | . 998 Capitals | Tom Wilson | RW | 523 | 1.99 | . 3518 Stars | Antoine Roussel | LW | 432 | 1.97 | . 471 Blues | Ryan Reaves | RW | 455 | 1.58 | . 1678 Flyers | Wayne Simmonds | RW | 614 | 1.40 | . 1906 Islanders | Matt Martin | LW | 532 | 1.40 | . 1974 Jets | Dustin Byfuglien | D | 555 | 1.37 | . 580 Bruins | Milan Lucic | LW | 433 | 1.37 | . 725 Canadiens | P.K. Subban | D | 473 | 1.31 | . What are the league&#39;s best goalies? . # I drop all columns that I don&#39;t need in my analysis for now top_goalies = goalie[[&#39;game_id&#39;,&#39;teamName&#39;,&#39;fullName&#39;,&#39;timeOnIce&#39;,&#39;savePercentage&#39;, &#39;shortHandedSaves&#39;]] .groupby([&#39;teamName&#39;,&#39;fullName&#39;], as_index=False) .agg({&#39;game_id&#39;:&#39;count&#39;, &#39;savePercentage&#39;:&#39;mean&#39;, &#39;timeOnIce&#39;:&#39;mean&#39;, &#39;shortHandedSaves&#39;:&#39;mean&#39;}) . # Rename columns top_goalies.columns = [&#39;Team Name&#39;,&#39;Player Name&#39;,&#39;Total Games&#39;,&#39;Avg Save Percentage&#39;, &#39;Avg Time On Ice&#39;, &#39;Avg Short Handed Saves&#39;] . # Let&#39;s convert the time on ice from seconds to minutes top_goalies[&#39;Avg Time On Ice&#39;] = top_goalies[&#39;Avg Time On Ice&#39;] / 60 . top_goalies.head() . Team Name Player Name Total Games Avg Save Percentage Avg Time On Ice Avg Short Handed Saves . 0 Avalanche | Andrew Hammond | 4 | 94.55 | 48.96 | 1.00 | . 1 Avalanche | Brian Elliott | 12 | 88.61 | 57.51 | 0.58 | . 2 Avalanche | Calvin Pickard | 86 | 90.63 | 54.66 | 0.65 | . 3 Avalanche | Craig Anderson | 33 | 88.65 | 54.86 | 0.61 | . 4 Avalanche | Jean-Sebastien Giguere | 72 | 91.32 | 54.71 | 0.50 | . display_bar_plot(top_goalies, &#39;Avg Save Percentage&#39;, &#39;Player Name&#39;, &#39;Avg Save Percentage&#39;) plt.xlabel(&#39;Player Name&#39;) plt.ylabel(&#39;Avg save percentage&#39;) plt.suptitle(&#39;Average save percentage by goalie (top 10)&#39;, fontsize=14) plt.title(&#39;2010 - 2019&#39;, fontsize=12) plt.show() . What happened here? None of this names resonate to the ones we are so used to see playing. As I stated earlier, these are all emergency goalies and played some minutes here and there. So I fix thsi adding a minimum of season as before: . top_goalies = top_goalies[top_goalies[&#39;Total Games&#39;] &gt; min_games] . display_bar_plot(top_goalies, &#39;Avg Save Percentage&#39;, &#39;Player Name&#39;,&#39;Avg Save Percentage&#39;) plt.xlabel(&#39;Player Name&#39;) plt.ylabel(&#39;Avg save percentage&#39;) plt.ylim([90, 92]) plt.suptitle(&#39;Average save percentage by goalie (top 10)&#39;, fontsize=14) plt.title(&#39;2010 - 2019&#39;, fontsize=12) plt.show() . It is very thaugh to be a goalie! Competence is huge! The variation between the first goalie (Tuukka Rask) and the second (Carey Price) is just 0.06%. . top_goalies.sort_values(&#39;Avg Save Percentage&#39;, ascending=False) .head(10)[[&#39;Team Name&#39;,&#39;Player Name&#39;,&#39;Total Games&#39;,&#39;Avg Save Percentage&#39;]] . Team Name Player Name Total Games Avg Save Percentage . 61 Bruins | Tuukka Rask | 521 | 91.56 | . 67 Canadiens | Carey Price | 531 | 91.50 | . 314 Rangers | Henrik Lundqvist | 617 | 91.32 | . 82 Capitals | Braden Holtby | 509 | 91.23 | . 20 Blackhawks | Corey Crawford | 526 | 91.07 | . 294 Penguins | Marc-Andre Fleury | 442 | 90.81 | . 225 Kings | Jonathan Quick | 562 | 90.81 | . 308 Predators | Pekka Rinne | 593 | 90.78 | . 352 Senators | Craig Anderson | 441 | 90.58 | . 321 Red Wings | Jimmy Howard | 480 | 90.29 | . Let&#39;s look what goalie played the most number of games in average. . display_bar_plot(top_goalies, &#39;Avg Time On Ice&#39;, &#39;Player Name&#39;, &#39;Avg Time On Ice&#39;) plt.xlabel(&#39;Player Name&#39;) plt.ylabel(&#39;Avg time on ice (toi)&#39;) plt.suptitle(&#39;Average time on ice by goalie (top 10)&#39;, fontsize=14) plt.title(&#39;2010 - 2019&#39;, fontsize=12) plt.show() . top_goalies.sort_values(&#39;Avg Time On Ice&#39;, ascending=False) .head(10)[[&#39;Team Name&#39;,&#39;Player Name&#39;,&#39;Total Games&#39;,&#39;Avg Time On Ice&#39;]] . Team Name Player Name Total Games Avg Time On Ice . 67 Canadiens | Carey Price | 531 | 59.42 | . 314 Rangers | Henrik Lundqvist | 617 | 58.92 | . 225 Kings | Jonathan Quick | 562 | 58.88 | . 20 Blackhawks | Corey Crawford | 526 | 58.75 | . 308 Predators | Pekka Rinne | 593 | 58.56 | . 61 Bruins | Tuukka Rask | 521 | 58.29 | . 82 Capitals | Braden Holtby | 509 | 58.18 | . 294 Penguins | Marc-Andre Fleury | 442 | 58.13 | . 352 Senators | Craig Anderson | 441 | 57.63 | . 321 Red Wings | Jimmy Howard | 480 | 56.94 | . And as we did with the players let&#39;s see the save percentage taking into account the number of minutes played: . # Let&#39;s see also how Avg Save Percentage relate to time on ice (toi) top_goalies[&#39;Avg Save Percentage_by_toi&#39;] = top_goalies[&#39;Avg Save Percentage&#39;] / (top_goalies[&#39;Avg Time On Ice&#39;]) # Now we look at the top 10 players top_goalies.sort_values(&#39;Avg Save Percentage&#39;, ascending=False).head(10) . Team Name Player Name Total Games Avg Save Percentage Avg Time On Ice Avg Short Handed Saves Avg Save Percentage_by_toi . 61 Bruins | Tuukka Rask | 521 | 91.56 | 58.29 | 0.69 | 1.57 | . 67 Canadiens | Carey Price | 531 | 91.50 | 59.42 | 0.82 | 1.54 | . 314 Rangers | Henrik Lundqvist | 617 | 91.32 | 58.92 | 0.73 | 1.55 | . 82 Capitals | Braden Holtby | 509 | 91.23 | 58.18 | 0.73 | 1.57 | . 20 Blackhawks | Corey Crawford | 526 | 91.07 | 58.75 | 0.58 | 1.55 | . 294 Penguins | Marc-Andre Fleury | 442 | 90.81 | 58.13 | 0.68 | 1.56 | . 225 Kings | Jonathan Quick | 562 | 90.81 | 58.88 | 0.63 | 1.54 | . 308 Predators | Pekka Rinne | 593 | 90.78 | 58.56 | 0.57 | 1.55 | . 352 Senators | Craig Anderson | 441 | 90.58 | 57.63 | 0.78 | 1.57 | . 321 Red Wings | Jimmy Howard | 480 | 90.29 | 56.94 | 0.68 | 1.59 | . display_bar_plot(top_goalies, &#39;Avg Save Percentage_by_toi&#39;, &#39;Player Name&#39;, &#39;Avg Save Percentage_by_toi&#39;) plt.xlabel(&#39;Player Name&#39;) plt.ylabel(&#39;Avg save percentage by Avg time on ice (toi)&#39;) plt.suptitle(&#39;Avg save percentage by avg time on ice by goalie (top 10)&#39;, fontsize=14) plt.title(&#39;2010 - 2019&#39;, fontsize=12) plt.show() . top_goalies.sort_values(&#39;Avg Save Percentage_by_toi&#39;, ascending=False) .head(10)[[&#39;Team Name&#39;,&#39;Player Name&#39;,&#39;Total Games&#39;,&#39;Avg Save Percentage_by_toi&#39;]] . Team Name Player Name Total Games Avg Save Percentage_by_toi . 382 Stars | Kari Lehtonen | 450 | 1.60 | . 321 Red Wings | Jimmy Howard | 480 | 1.59 | . 352 Senators | Craig Anderson | 441 | 1.57 | . 61 Bruins | Tuukka Rask | 521 | 1.57 | . 82 Capitals | Braden Holtby | 509 | 1.57 | . 294 Penguins | Marc-Andre Fleury | 442 | 1.56 | . 20 Blackhawks | Corey Crawford | 526 | 1.55 | . 314 Rangers | Henrik Lundqvist | 617 | 1.55 | . 308 Predators | Pekka Rinne | 593 | 1.55 | . 225 Kings | Jonathan Quick | 562 | 1.54 | . What are the teams that score more goals? . Let&#39;s calculate the top 3 scorers per team in the league in the last decade. . skater_reindexed = top_skaters[[&#39;Total Goals&#39;, &#39;Team Name&#39;, &#39;Player Name&#39;]] .groupby([&#39;Team Name&#39;, &#39;Player Name&#39;]) .agg({&#39;Total Goals&#39;:&#39;sum&#39;}) .sort_values(by=[&#39;Team Name&#39;, &#39;Total Goals&#39;], ascending=[True, False]) .reset_index(drop=False) . top_3_per_team = skater_reindexed.groupby([&#39;Team Name&#39;]).head(3) . sns.set(rc={&#39;figure.figsize&#39;:(16,28)}) display_hbar_plot(top_3_per_team, &#39;Total Goals&#39;, &#39;Player Name&#39;, &#39;Team Name&#39;, color=None, palette=&#39;Paired&#39;) plt.title(&#39;Top 3 best scorers per team&#39;, fontsize=14) plt.show() . Now let&#39;s average the top 3 scorers per team to see which one is the most dangerous team in the league in the last decade . average_top_3_team = top_3_per_team.groupby([&#39;Team Name&#39;]).mean() .reset_index(drop=False) .sort_values(by=[&#39;Total Goals&#39;], ascending=[False]) . average_top_3_team.head() . Team Name Total Goals . 27 Sharks | 265.00 | . 1 Blackhawks | 253.67 | . 21 Penguins | 249.33 | . 7 Capitals | 248.33 | . 4 Bruins | 242.33 | . sns.set(rc={&#39;figure.figsize&#39;:(10,15)}) display_hbar_plot(average_top_3_team, &#39;Total Goals&#39;, &#39;Team Name&#39;, None) plt.title(&#39;Average of Top 3 scorers per Team n2010 - 2019&#39;, fontsize=14) plt.ylabel(None) plt.xlabel(&#39;Total Goals&#39;) plt.show() . Let&#39;s look at a similar metric but by Goals per Game and let&#39;s find out what is the team that stands out: . skater_per_team = top_skaters[[&#39;Team Name&#39;, &#39;Goals Per Game&#39;]] .groupby([&#39;Team Name&#39;]) .agg({&#39;Goals Per Game&#39;:&#39;mean&#39;}) .sort_values(by=[&#39;Goals Per Game&#39;], ascending=[False]) .reset_index(drop=False).head(20) . skater_per_team . Team Name Goals Per Game . 0 Stars | 0.32 | . 1 Lightning | 0.31 | . 2 Panthers | 0.30 | . 3 Oilers | 0.29 | . 4 Penguins | 0.29 | . 5 Hurricanes | 0.25 | . 6 Flyers | 0.25 | . 7 Ducks | 0.22 | . 8 Sharks | 0.22 | . 9 Avalanche | 0.22 | . 10 Blackhawks | 0.22 | . 11 Coyotes | 0.22 | . 12 Maple Leafs | 0.22 | . 13 Jets | 0.21 | . 14 Flames | 0.21 | . 15 Blues | 0.21 | . 16 Canadiens | 0.20 | . 17 Predators | 0.20 | . 18 Blue Jackets | 0.19 | . 19 Bruins | 0.19 | . sns.set(rc={&#39;figure.figsize&#39;:(10,15)}) display_hbar_plot(skater_per_team, &#39;Goals Per Game&#39;, &#39;Team Name&#39;, None) plt.title(&#39;Average Goals per game by Team n2010 - 2019&#39;, fontsize=14) plt.ylabel(None) plt.xlabel(&#39;Goals Rate&#39;) plt.show() . What is the most prolific country producing NHL players? . players_per_country = player_info[&#39;nationality&#39;].value_counts().to_frame().reset_index(drop=False) . players_per_country.columns = [&#39;Country&#39;, &#39;Number Players&#39;] . df = players_per_country.sort_values(by=&#39;Number Players&#39;, ascending=False) . df . Country Number Players . 0 CAN | 1149 | . 1 USA | 651 | . 2 SWE | 184 | . 3 FIN | 101 | . 4 RUS | 99 | . 5 CZE | 97 | . 6 SVK | 25 | . 7 CHE | 24 | . 8 DEU | 20 | . 9 DNK | 14 | . 10 LVA | 11 | . 12 BLR | 6 | . 11 FRA | 6 | . 13 AUT | 4 | . 14 UKR | 3 | . 15 NOR | 3 | . 16 SVN | 2 | . 17 LTU | 2 | . 18 GBR | 2 | . 19 AUS | 1 | . 20 HRV | 1 | . 21 NGA | 1 | . 22 NLD | 1 | . 23 KAZ | 1 | . 24 BHS | 1 | . Note The code/graph bellow was extracted from FC Python. . I have not used this code and graph in my blog post as I did not clearly understood how to sort it properly and add text (number of players in each country category) hence I used Tableau instead which I know very well how to use it. . norm = matplotlib.colors.Normalize(vmin=min(players_per_country[&#39;Number Players&#39;]), vmax=max(players_per_country[&#39;Number Players&#39;])) colors = [matplotlib.cm.Blues(norm(value)) for value in players_per_country[&#39;Number Players&#39;]] #Create our plot and resize it. fig = plt.gcf() ax = fig.add_subplot() fig.set_size_inches(16, 8) #Use squarify to plot our data, label it and add colours. We add an alpha layer to ensure black labels show through squarify.plot(label=df[&#39;Country&#39;].head(15), sizes=df[&#39;Number Players&#39;], alpha=.6) plt.title(&quot;Country that produces more NHL players&quot;, fontsize=14) #Remove our axes and display the plot plt.axis(&#39;off&#39;) plt.show() . Some plots I use to get an idea of the data . skater.hist(bins=20, figsize=(20, 15)); .",
            "url": "https://pwolter.github.io/blog/jupyter/data%20science/2020/02/11/Hockey-Stats.html",
            "relUrl": "/jupyter/data%20science/2020/02/11/Hockey-Stats.html",
            "date": " • Feb 11, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Test Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://pwolter.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://pwolter.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}